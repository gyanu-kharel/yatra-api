// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using YatraBackend.Database;

#nullable disable

namespace YatraBackend.Database.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240220010937_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("YatraBackend.Database.Models.Domain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<List<string>>("Metadata")
                        .HasColumnType("text[]");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Domains");

                    b.HasData(
                        new
                        {
                            Id = new Guid("87f9ebcc-b039-408e-ae89-05dc9aa124be"),
                            IsActive = true,
                            Name = "Health"
                        },
                        new
                        {
                            Id = new Guid("04184463-55aa-4d9c-863a-70a158fec545"),
                            IsActive = true,
                            Name = "Education"
                        },
                        new
                        {
                            Id = new Guid("7c5e1ac1-c009-4222-851c-7977ac5f7bb7"),
                            IsActive = true,
                            Name = "Tourism"
                        },
                        new
                        {
                            Id = new Guid("0851b9d2-9fb8-4690-8ee0-342a474eb0e0"),
                            IsActive = true,
                            Name = "Transport"
                        },
                        new
                        {
                            Id = new Guid("a87b043a-d096-4c57-a747-f7646a3a7141"),
                            IsActive = true,
                            Name = "Finance"
                        },
                        new
                        {
                            Id = new Guid("5ef217f3-5d21-4e8c-9a8f-ea2774be97f4"),
                            IsActive = true,
                            Name = "Agriculture"
                        },
                        new
                        {
                            Id = new Guid("1f607ac8-0fe8-43e9-8eb4-278048593cbe"),
                            IsActive = true,
                            Name = "Fashion"
                        },
                        new
                        {
                            Id = new Guid("55828f19-4b04-40b5-bb83-9102a138664e"),
                            IsActive = true,
                            Name = "Social Media"
                        },
                        new
                        {
                            Id = new Guid("13a2d344-08e7-40b0-9332-ae52314c8590"),
                            IsActive = true,
                            Name = "E-commerce"
                        });
                });

            modelBuilder.Entity("YatraBackend.Database.Models.Metadata", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<string>>("Content")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.ToTable("Metadatas");
                });

            modelBuilder.Entity("YatraBackend.Database.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Complexity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DocumentationUrl")
                        .HasColumnType("text");

                    b.Property<Guid>("DomainId")
                        .HasColumnType("uuid");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<int>("FavoriteCount")
                        .HasColumnType("integer");

                    b.Property<string>("GithubLink")
                        .HasColumnType("text");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ProjectYear")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ScreenshotUrl")
                        .HasColumnType("text");

                    b.Property<string>("SkillLevel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TeamSize")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UiDesignLink")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("ViewCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DomainId");

                    b.HasIndex("UserId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("YatraBackend.Database.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d7801778-9932-4363-b272-d40ccecdcbcc"),
                            Description = "Administrative roles and permissions",
                            IsActive = true,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("d340fdc2-b4d3-4617-bf86-6725ace833ca"),
                            Description = "Basic user roles and permissions",
                            IsActive = true,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("YatraBackend.Database.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("YatraBackend.Database.Models.UserFavorite", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("UserFavorites");
                });

            modelBuilder.Entity("YatraBackend.Database.Models.Project", b =>
                {
                    b.HasOne("YatraBackend.Database.Models.Domain", "Domain")
                        .WithMany()
                        .HasForeignKey("DomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YatraBackend.Database.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Domain");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YatraBackend.Database.Models.User", b =>
                {
                    b.HasOne("YatraBackend.Database.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("YatraBackend.Database.Models.UserFavorite", b =>
                {
                    b.HasOne("YatraBackend.Database.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YatraBackend.Database.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
