// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using YatraBackend.Database;

#nullable disable

namespace YatraBackend.Database.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240219202525_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("YatraBackend.Database.Models.Domain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<List<string>>("Metadata")
                        .HasColumnType("text[]");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Domains");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c0441395-773d-4bfd-8130-cc41723b2593"),
                            IsActive = true,
                            Name = "Health"
                        },
                        new
                        {
                            Id = new Guid("66f1e987-4540-472b-a5f9-f6744ee80bc8"),
                            IsActive = true,
                            Name = "Education"
                        },
                        new
                        {
                            Id = new Guid("6352345f-8221-4a63-ba27-fb63f4e23689"),
                            IsActive = true,
                            Name = "Tourism"
                        },
                        new
                        {
                            Id = new Guid("905f119b-1d1e-4376-8a36-2ce2c0e13f1f"),
                            IsActive = true,
                            Name = "Transport"
                        },
                        new
                        {
                            Id = new Guid("af5227d2-3a65-465f-a6d8-715d13d16248"),
                            IsActive = true,
                            Name = "Finance"
                        },
                        new
                        {
                            Id = new Guid("e9db752a-5419-4634-b2af-9ddb990668bf"),
                            IsActive = true,
                            Name = "Agriculture"
                        },
                        new
                        {
                            Id = new Guid("8e533198-16ac-429e-abfc-da7ae8985874"),
                            IsActive = true,
                            Name = "Fashion"
                        },
                        new
                        {
                            Id = new Guid("3070f531-5ebe-4866-a39f-2ed32a67bde3"),
                            IsActive = true,
                            Name = "Social Media"
                        },
                        new
                        {
                            Id = new Guid("ae234319-0725-48fb-9384-727745ec9e36"),
                            IsActive = true,
                            Name = "E-commerce"
                        });
                });

            modelBuilder.Entity("YatraBackend.Database.Models.Metadata", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<string>>("Content")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.ToTable("Metadatas");
                });

            modelBuilder.Entity("YatraBackend.Database.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Complexity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DocumentationUrl")
                        .HasColumnType("text");

                    b.Property<Guid>("DomainId")
                        .HasColumnType("uuid");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<string>("GithubLink")
                        .HasColumnType("text");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ProjectYear")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ScreenshotUrl")
                        .HasColumnType("text");

                    b.Property<string>("SkillLevel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TeamSize")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UiDesignLink")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DomainId");

                    b.HasIndex("UserId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("YatraBackend.Database.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e0a7c8fe-6a9a-4935-9ef9-80b8c01e8b2c"),
                            Description = "Administrative roles and permissions",
                            IsActive = true,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("6f324299-f21f-4fc6-aa95-7b12180b29a1"),
                            Description = "Basic user roles and permissions",
                            IsActive = true,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("YatraBackend.Database.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("YatraBackend.Database.Models.Project", b =>
                {
                    b.HasOne("YatraBackend.Database.Models.Domain", "Domain")
                        .WithMany()
                        .HasForeignKey("DomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YatraBackend.Database.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Domain");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YatraBackend.Database.Models.User", b =>
                {
                    b.HasOne("YatraBackend.Database.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });
#pragma warning restore 612, 618
        }
    }
}
