// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using YatraBackend.Database;

#nullable disable

namespace YatraBackend.Database.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240130214509_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("YatraBackend.Database.Models.Domain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Domains");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aca6b343-7dae-43aa-85f3-445a7662d83f"),
                            IsActive = true,
                            Name = "Health"
                        },
                        new
                        {
                            Id = new Guid("5d357423-6ec7-46db-b00f-a7836faea383"),
                            IsActive = true,
                            Name = "Education"
                        },
                        new
                        {
                            Id = new Guid("2bc7c2c6-1ce9-456f-babe-a2d15167a61b"),
                            IsActive = true,
                            Name = "Tourism"
                        },
                        new
                        {
                            Id = new Guid("2e144030-dd76-4a74-9939-f968d7a0adce"),
                            IsActive = true,
                            Name = "Transport"
                        },
                        new
                        {
                            Id = new Guid("10d95da0-8c5f-4492-93b0-f6197d33b8d3"),
                            IsActive = true,
                            Name = "Finance"
                        },
                        new
                        {
                            Id = new Guid("3a612668-ab68-4412-beb5-997b478b2af2"),
                            IsActive = true,
                            Name = "Agriculture"
                        },
                        new
                        {
                            Id = new Guid("e1cadd03-621e-449b-954b-bdfa71641d0e"),
                            IsActive = true,
                            Name = "Fashion"
                        },
                        new
                        {
                            Id = new Guid("c601c6b7-ed15-4e0a-8ad8-cc2df97a44de"),
                            IsActive = true,
                            Name = "Social Media"
                        },
                        new
                        {
                            Id = new Guid("6994e20c-feb0-4ad1-af9d-dbd1f6386f16"),
                            IsActive = true,
                            Name = "E-commerce"
                        });
                });

            modelBuilder.Entity("YatraBackend.Database.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Complexity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DocumentationUrl")
                        .HasColumnType("text");

                    b.Property<Guid>("DomainId")
                        .HasColumnType("uuid");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<string>("GithubLink")
                        .HasColumnType("text");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ProjectYear")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ScreenshotUrl")
                        .HasColumnType("text");

                    b.Property<string>("SkillLevel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TeamSize")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UiDesignLink")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DomainId");

                    b.HasIndex("UserId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("YatraBackend.Database.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5fcdab01-4ebf-4899-87ef-43a4014abf50"),
                            Description = "Administrative roles and permissions",
                            IsActive = true,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("34a258fb-29c7-4cb2-a8ff-8d87f5790479"),
                            Description = "Basic user roles and permissions",
                            IsActive = true,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("YatraBackend.Database.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("YatraBackend.Database.Models.Project", b =>
                {
                    b.HasOne("YatraBackend.Database.Models.Domain", "Domain")
                        .WithMany()
                        .HasForeignKey("DomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YatraBackend.Database.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Domain");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YatraBackend.Database.Models.User", b =>
                {
                    b.HasOne("YatraBackend.Database.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });
#pragma warning restore 612, 618
        }
    }
}
